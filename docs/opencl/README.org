* OpenCL fast help

- [[#code-example][Code example]]
- [[#contextenvironment-preparation][Context/Environment preparation]]
- [[#how-to-install][How to install]]
- [[#how-to-build][How to build]]
- [[#how-to-execute][How to execute]]
- [[#references][References]]

The supporting platform for this project is OpenCL. Here you will find
some materials to help you executing the project and a short
introduction to the ecosystem.

There are some files here to help you get in touch with OpenCL.

- ~CMakeLists.txt~: To build the executable.
- ~info.cpp~: First OpenCL program to execute. Gathers basic info of
  your system.
- ~vector_add.cpp~: Uses OpenCL to calculate the sum of two vectors.
- ~README.org~: Well... this file.

This will be an example trace of executing this two programs:

#+BEGIN_SRC bash
$> ./build/info

Device name:          Intel(R) HD Graphics Haswell Ultrabook GT2 Mobile
Driver version:       OpenCL 1.2 beignet 1.4 (git-fc5f430c)
Compute Units:        20
Workgroup size (max): 512
Work units (max):     20x512 = 10240
#+END_SRC

#+BEGIN_SRC bash
$> ./build/vector_add

A [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ]
B [24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0 ]
C [24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 ]
#+END_SRC

The language used to interact with the OpenCL platform is C++, but
there are others interfaces to interact with the platform. You can
search for bindings in languages like C, Python, Java or even Node.

I couldn't make Haskell OpenCL bindings work, so if you manage to do
that, please contact me :D

** Code example

Here we will explain a the code of a OpenCL program. We call *kernel*
the code that is execute inside you graphics card. You can write
OpenCL kernels in a language that is very similar to C, but it is not
the same (it can have some limitations depending of OpenCL versions).

The name of our kernel function is ~vector_add~, and it receives the
vectors to operate and the length of them.

#+BEGIN_SRC c
void kernel vector_add(global int* A, // Read vector 1
                       global int* B, // Read vector 2
                       global int* C, // Write vector
                       const unsigned int n) { // Vectors length

  uint id = get_global_id(0);
  if (id < n) { // We don't want to write outside the vector
    C[id] = A[id] + B[id];
  }
}
#+END_SRC

Each work unit of your card executes this function. Sometimes I will
refer to the work unit as /core/. In order to parallelize it, we want
that each core make a different operation.

The ~get_global_id(0)~ gets the core position in your card. We will
think of this as an index for the vectors. If the ~id~ assigned is in
the range of the vectors, we perform the addition at that position.

In the kernels we will define our algorithm, but we need to setup
properly the environment to make them work correctly. How to make a
simple setup is explained in the next section.

** Context/Environment preparation

Portability in OpenCL comes with a downside: boilerplate. We need to
setup the device and identify supported versions to compile a OpenCL
program. This means that OpenCL kernels are compiled at runtime
(yeah...) depending on the platform.

But remember that this is to make it very portable. The same program
may be executed in the last NVIDIA or AMD graphics card, or even in
your mobile. On the other hand, performance may be affected because of
hardware dependant instructions.

There are some concepts involving GPU programming with OpenCL. We will
need to define them.

- Platform: A particular implementation of the OpenCL standard. What you install.
- Device: The hardware device, which runs your programs.
- Context: Particular scenario for you program, which devices are
  available, which platforms support...
- Program: OpenCL code, including kernels and auxiliary
  functions. This are going to be compiled depending on your context.
- Queue: A collection of instructions to execute. You send to the
  queue your tasks and retrieve from them the results.

Al this things need to be defined at runtime, so there is a bit of
boilerplate that we need to include in our programs. But once we have
them, we can interact with the hardware very easily.

** How to install

OpenCL is an open cross-platform for parallel programming. Probably
you can install it without many problems, as it is usually well
supported and doesn't have hardware limitations. You only need an
implementation for your platform.

There are free/open and private implementations. You can choose to
install the one you prefer.

*** Linux

If you are under a Linux system, one of the best resources to know
what to install is the Arch wiki.

 - https://wiki.archlinux.org/index.php/GPGPU

There is a list for AMD, NVIDIA or Intel runtimes.

*** MacOS

As far as I know, it should be already installed. But not for much
time, because they are planning to stop using it.

*** Windows

Usually you should have to search for you Graphics Card and install latest drivers.

*** Docker

What? Yep. There are some docker containers ready to execute OpenCL with your card:

#+BEGIN_SRC bash
docker run -t -i --device /dev/dri:/dev/dri chihchun/opencl-beignet clinfo
#+END_SRC

You can attach some devices to you container. Neat.

** How to build

We will use ~CMake~ tool to build the project. Execute the following
commands in this directory (~docs/opencl/~)

#+BEGIN_SRC bash
mkdir build
cd build
cmake ..
cmake --build .
#+END_SRC

After executing this commands, you should find ~info~ and ~vector_add~
in ~build~ directory. You can also rebuild the project outside of
~build~ with the command:

#+BEGIN_SRC bash
cmake --build build
#+END_SRC

** How to execute

After building your binaries, you can execute them as usually:

#+BEGIN_SRC bash
$> ./build/info

Device name:          Intel(R) HD Graphics Haswell Ultrabook GT2 Mobile
Driver version:       OpenCL 1.2 beignet 1.4 (git-fc5f430c)
Compute Units:        20
Workgroup size (max): 512
Work units (max):     20x512 = 10240
#+END_SRC

#+BEGIN_SRC bash
$> ./build/vector_add

A [ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ]
B [24 23 22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0 ]
C [24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 24 ]
#+END_SRC

** References

- OpenCL specification (pdf)
  - Version 1.2: https://www.khronos.org/registry/OpenCL/specs/opencl-1.2.pdf
  - Version 2.2: https://www.khronos.org/registry/OpenCL/specs/2.2/pdf/OpenCL_API.pdf
- OpenCL specification (web form)
  - Version 1.2: https://www.khronos.org/registry/OpenCL/sdk/1.2/docs/man/xhtml/
  - Version 2.2: https://www.khronos.org/registry/OpenCL/specs/2.2/html/OpenCL_API.html
